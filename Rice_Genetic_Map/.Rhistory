single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
View(single_row)
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
print(i)
single_row <- rice[i, ] #Process line by line
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
View(single_row)
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)] == 'N', as.numeric) #make numeric, turns all others into missing values
View(single_row)
single_row <- rice[i, ] #Process line by line
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
het <- c('R', 'Y', 'S', 'W', 'K', 'M')
single_row[, 18:ncol(single_row)] <- gsub(het, 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('R', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('Y', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('S', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('W', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('K', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('M', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)], as.numeric) #make numeric, turns all others into missing values
View(single_row)
single_row <- rice[i, ] #Process line by line
str(single_row)
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
single_row[, 18:ncol(single_row)] <- gsub('R', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('Y', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('S', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('W', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('K', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('M', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
View(single_row)
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)], as.numeric) #make numeric, turns all others into missing values
single_row[, 18:ncol(single_row)] <- gsub(1, 'A', single_row[, 18:ncol(single_row)]) #convert from number to lettter
single_row[, 18:ncol(single_row)] <- gsub(2, 'B', single_row[, 18:ncol(single_row)])
single_row[, 18:ncol(single_row)] <- gsub(3, 'X', single_row[, 18:ncol(single_row)]) #substitue heterozygote
ab_mat <- rbind(ab_mat, single_row) #write out row
View(single_row)
table(t(single_row))
ab_mat <- NULL #make an AB dataframe to hold results
for(i in 1:nrow(rice)){
print(i)
single_row <- rice[i, ] #Process line by line
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
single_row[, 18:ncol(single_row)] <- gsub('R', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('Y', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('S', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('W', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('K', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('M', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)], as.numeric) #make numeric, turns all others into missing values
single_row[, 18:ncol(single_row)] <- gsub(1, 'A', single_row[, 18:ncol(single_row)]) #convert from number to lettter
single_row[, 18:ncol(single_row)] <- gsub(2, 'B', single_row[, 18:ncol(single_row)])
single_row[, 18:ncol(single_row)] <- gsub(3, 'X', single_row[, 18:ncol(single_row)]) #substitue heterozygote
ab_mat <- rbind(ab_mat, single_row) #write out row
} #get warnings of NA introduced (by design in this case)
rownames(ab_mat) <- ab_mat$rs #give rownames
ab_mat <- ab_mat[, 19:ncol(ab_mat)] #select columns git rid of Nipponbare
ab_mat[ab_mat == 'NA'] <- '-' #conver for ASMAP missing vlaues
write.csv(ab_mat, file = './Data/Intermediate_File/Rice_Markers.csv', row.names = TRUE, quote = FALSE) #write out and read in to get the formatting
rm(ab_mat, rice, single_row, A, B, i)
map <- read.csv(file = './data/Intermediate_File/Rice_Markers.csv', header = TRUE, stringsAsFactors = FALSE, row.names = 1, check.names = FALSE)
View(map)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
str(map)
View(map)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RILn', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
str(map)
View(map)
colnames(map)
map <- read.csv(file = './data/Intermediate_File/Rice_Markers.csv', header = TRUE, stringsAsFactors = FALSE, row.names = 1, check.names = FALSE)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
traceback()
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL3', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
require(plyr)
rice <- read.delim(file = './Data/Original_Data/rice_example.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read in file
rice <- tassel5_to_params(rice, 11, 174) #get population parameters
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
hist(rice$percentHET, main = 'Percent heterozygous')
abline(v = mean(rice$percentHET))
mean(rice$percentHET)
rice <- rice[rice$IR64 %in% c('A', 'G', 'C', 'T') & rice$Azucena %in% c('A', 'G', 'C', 'T') , ]
rice <- rice[rice$IR64 != rice$Azucena, ] #get contrasting markers
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
rice <- rice[rice$present > 0.95 & rice$MAF > 0.45,] #filter
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
require(ASMap)
ab_mat <- NULL #make an AB dataframe to hold results
View(rice)
ab_mat <- NULL #make an AB dataframe to hold results
for(i in 1:nrow(rice)){
print(i)
single_row <- rice[i, ] #Process line by line
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
single_row[, 18:ncol(single_row)] <- gsub('R', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('Y', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('S', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('W', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('K', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('M', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)], as.numeric) #make numeric, turns all others into missing values
single_row[, 18:ncol(single_row)] <- gsub(1, 'A', single_row[, 18:ncol(single_row)]) #convert from number to lettter
single_row[, 18:ncol(single_row)] <- gsub(2, 'B', single_row[, 18:ncol(single_row)])
single_row[, 18:ncol(single_row)] <- gsub(3, 'X', single_row[, 18:ncol(single_row)]) #substitue heterozygote
ab_mat <- rbind(ab_mat, single_row) #write out row
} #get warnings of NA introduced (by design in this case)
View(ab_mat)
rownames(ab_mat) <- ab_mat$rs #give rownames
ab_mat <- ab_mat[, 19:ncol(ab_mat)] #select columns git rid of Nipponbare
ab_mat[ab_mat == 'NA'] <- '-' #conver for ASMAP missing vlaues
View(ab_mat)
i=921
print(i)
single_row <- rice[i, ] #Process line by line
out = t(single_row)
View(out)
require(plyr)
rice <- read.delim(file = './Data/Original_Data/rice_example.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read in file
rice <- rice[nchar(rice$alleles) == 3, ]
rice <- tassel5_to_params(rice, 11, 174) #get population parameters
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
hist(rice$percentHET, main = 'Percent heterozygous')
abline(v = mean(rice$percentHET))
mean(rice$percentHET)
rice <- rice[rice$IR64 %in% c('A', 'G', 'C', 'T') & rice$Azucena %in% c('A', 'G', 'C', 'T') , ]
rice <- rice[rice$IR64 != rice$Azucena, ] #get contrasting markers
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
rice <- rice[rice$present > 0.95 & rice$MAF > 0.45,] #filter
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
require(ASMap)
ab_mat <- NULL #make an AB dataframe to hold results
for(i in 1:nrow(rice)){
print(i)
single_row <- rice[i, ] #Process line by line
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
single_row[, 18:ncol(single_row)] <- gsub('R', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('Y', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('S', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('W', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('K', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('M', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)], as.numeric) #make numeric, turns all others into missing values
single_row[, 18:ncol(single_row)] <- gsub(1, 'A', single_row[, 18:ncol(single_row)]) #convert from number to lettter
single_row[, 18:ncol(single_row)] <- gsub(2, 'B', single_row[, 18:ncol(single_row)])
single_row[, 18:ncol(single_row)] <- gsub(3, 'X', single_row[, 18:ncol(single_row)]) #substitue heterozygote
ab_mat <- rbind(ab_mat, single_row) #write out row
} #get warnings of NA introduced (by design in this case)
rownames(ab_mat) <- ab_mat$rs #give rownames
ab_mat <- ab_mat[, 19:ncol(ab_mat)] #select columns git rid of Nipponbare
ab_mat[ab_mat == 'NA'] <- '-' #conver for ASMAP missing vlaues
write.csv(ab_mat, file = './Data/Intermediate_File/Rice_Markers.csv', row.names = TRUE, quote = FALSE) #write out and read in to get the formatting
rm(ab_mat, rice, single_row, A, B, i)
map <- read.csv(file = './data/Intermediate_File/Rice_Markers.csv', header = TRUE, stringsAsFactors = FALSE, row.names = 1, check.names = FALSE)
View(map)
all(map %in% c('A', 'X', 'B', '-'))
any(map ==  '0')
any(map ==  0)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 25, noMap.size = 35, miss.thresh = 200) #play with parameters to make better map
plot(map_out)
dev.off()
pdf(file = './data/Figures/Rice_Linkage_Map.pdf', height = 6, width = 8)
plotMap(map_out) #plot the genetic map
dev.off()
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-07, noMap.dist = 25, noMap.size = 15, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-08, noMap.dist = 15, noMap.size = 15, miss.thresh = 200) #play with parameters to make better map
plot(map_out)
dev.off()
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-04, noMap.dist = 15, noMap.size = 15, miss.thresh = 200) #play with parameters to make better map
pdf(file = './data/Figures/Rice_Linkage_Map.pdf', height = 6, width = 8)
plotMap(map_out) #plot the genetic map
dev.off()
?mstmap
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-04, noMap.dist = 10, noMap.size = 15, miss.thresh = 200) #play with parameters to make better map
plot(map_out)
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-04, noMap.dist = 10, noMap.size = 0, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-05, noMap.dist = 10, noMap.size = 20, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 7, noMap.size = 20, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-07, noMap.dist = 5, noMap.size = 20, miss.thresh = 200) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-08, noMap.dist = 5, noMap.size = 25, miss.thresh = 200) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-09, noMap.dist = 5, noMap.size = 25, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-09, noMap.dist = 5, noMap.size = 30, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-09, noMap.dist = 2, noMap.size = 30, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-07, noMap.dist = 4, noMap.size = 30, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 4, noMap.size = 30, miss.thresh = 200) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 4, noMap.size = 40, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-05, noMap.dist = 4, noMap.size = 40, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-05, noMap.dist = 3, noMap.size = 40, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-05, noMap.dist = 2, noMap.size = 40, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 5, noMap.size = 50, miss.thresh = 200) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 5, noMap.size = 5, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 5, noMap.size = 50, miss.thresh = 200) #play with parameters to make better map
plotMap(map_out)
pdf(file = './data/Figures/Rice_Linkage_Map.pdf', height = 6, width = 8)
plotMap(map_out) #plot the genetic map
dev.off()
map_out$geno$L1$map #look at linkage groups
map_out$geno$L2$map
marker_map <- NULL #get a dataframe to hold map data
for(i in 1:length(map_out$geno)){ #get map data
seg <- map_out$geno[[i]][[2]]
seg <- as.data.frame(seg)
seg$marker_name <- rownames(seg)
colnames(seg)[1] <- 'cM'
rownames(seg) <- NULL
seg$linkage_group <- i
seg <- seg[,c(2, 3, 1)]
marker_map <- rbind(marker_map, seg)
}
View(marker_map)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'RM', p.value = 1e-06, noMap.dist = 5, noMap.size = 50, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'ML', p.value = 1e-06, noMap.dist = 5, noMap.size = 50, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 5, noMap.size = 50, miss.thresh = 200) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-06, noMap.dist = 5, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-06, noMap.dist = 5, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-05, noMap.dist = 5, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-05, noMap.dist = 5, noMap.size = 70, miss.thresh = 50) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-05, noMap.dist = 7, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-07, noMap.dist = 7, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-08, noMap.dist = 7, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-08, noMap.dist = 6, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-05, noMap.dist = 6, noMap.size = 50, miss.thresh = 50) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-05, noMap.dist = 6, noMap.size = 50, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-04, noMap.dist = 6, noMap.size = 50, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-04, noMap.dist = 5, noMap.size = 50, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-04, noMap.dist = 8, noMap.size = 50, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-04, noMap.dist = 8, noMap.size = 50, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-07, noMap.dist = 8, noMap.size = 50, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-07, noMap.dist = 8, noMap.size = 70, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-07, noMap.dist = 7, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-04, noMap.dist = 7, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-04, noMap.dist = 10, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-03, noMap.dist = 10, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-09, noMap.dist = 10, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-09, noMap.dist = 10, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
marker_map <- NULL #get a dataframe to hold map data
for(i in 1:length(map_out$geno)){ #get map data
seg <- map_out$geno[[i]][[2]]
seg <- as.data.frame(seg)
seg$marker_name <- rownames(seg)
colnames(seg)[1] <- 'cM'
rownames(seg) <- NULL
seg$linkage_group <- i
seg <- seg[,c(2, 3, 1)]
marker_map <- rbind(marker_map, seg)
}
View(marker_map)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-09, noMap.dist = 12, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-09, noMap.dist = 15, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-09, noMap.dist = 17, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-10, noMap.dist = 17, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-10, noMap.dist = 18, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-11, noMap.dist = 19, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-12, noMap.dist = 20, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-12, noMap.dist = 25, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 23, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 25, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 27, noMap.size = 80, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL4', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 27, noMap.size = 90, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 27, noMap.size = 90, miss.thresh = 20) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 28, noMap.size = 90, miss.thresh = 20) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 28, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-13, noMap.dist = 30, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-14, noMap.dist = 30, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-14, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-5, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-7, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-9, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 1e-10, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-11, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-12, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL6', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-12, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-12, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
pdf(file = './data/Figures/Rice_Linkage_Map.pdf', height = 6, width = 8)
plotMap(map_out) #plot the genetic map
dev.off()
map_out$geno$L1$map #look at linkage groups
map_out$geno$L2$map
marker_map <- NULL #get a dataframe to hold map data
for(i in 1:length(map_out$geno)){ #get map data
seg <- map_out$geno[[i]][[2]]
seg <- as.data.frame(seg)
seg$marker_name <- rownames(seg)
colnames(seg)[1] <- 'cM'
rownames(seg) <- NULL
seg$linkage_group <- i
seg <- seg[,c(2, 3, 1)]
marker_map <- rbind(marker_map, seg)
}
ab_mat$marker_name <- rownames(ab_mat)
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/Class/Genomic_Selection/Rice_Genetic_Map/')
setwd('/Users/jcrain/Documents/Class/Genomic_Selection/Rice_Genetic_Map/')
options(digits = 10) #set options to include lots of digits
tassel5_to_params=function(x="hap matrix", y="columns to skip", z="population number"){
geno=x
#recount allele A and B and het
alleleA=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 3, 3) & geno[,(y+1):ncol(geno)]!="N") #only counts what is not allele B and missing.  i.e. counts allele A and various calls for heterozygous
alleleB=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 1, 1) & geno[,(y+1):ncol(geno)]!="N")
het=rowSums(geno[,(y+1):ncol(geno)] == "M") + rowSums( geno[,(y+1):ncol(geno)] ==   "R") + rowSums(geno[,(y+1):ncol(geno)] ==  "W") + rowSums(geno[,(y+1):ncol(geno)] ==  "K") + rowSums(geno[,(y+1):ncol(geno)] ==  "S") + rowSums(geno[,(y+1):ncol(geno)] ==  "Y")
present=1-(rowSums(geno[,(y+1):ncol(geno)]=="N")/z)
MAF=apply(cbind(((alleleA-het)*2+het), (alleleB-het)*2+het), 1, min)/apply(
cbind(((alleleA-het)*2+het), ((alleleB-het)*2+het)), 1, sum)
percentHet=het/apply(cbind(alleleA-het, alleleB-het, het), 1, sum)
return(cbind.data.frame(geno[,1:y], "alleleA"=alleleA, "alleleB"=alleleB, "het"=het, "present"= present, "MAF"=MAF, "percentHET"=percentHet, geno[,(y+1):ncol(geno)]))
}
hap_to_G=function(x="hap matrix", y="number of columns of information"){
##From Prasana, pulls out first allele for a and second for b
a = substring(x$alleles,1,1)
#Checks the frequency of the alleles if the second allele is more frequent it is substitued
a[x$alleleA<x$alleleB] = substring(x$alleles,3,3)[x$alleleA<x$alleleB]
#Same thing with the second allele
b = substring(x$alleles,3,3)
b[x$alleleA<x$alleleB] = substring(x$alleles,1,1)[x$alleleA<x$alleleB]
#Checks to make sure all alleles are one or the other
#print(paste("If 0 all alleles are accounted for: ", sum(a == b), sep=""))
## Turn into letter matrix for mapping
#makes a copy of the hap matrix
hap01 = x
#sets all allele values to NA
hap01[,(y+1):ncol(hap01)]=NA
## Turn allele a and allele b into 1 and -1.  Het into 0
#line by line if a line is a then it places 1 in hap01 for the allele
hap01[x == a] = 1
hap01[x == b] = -1
hap01[x == "M"] = 0
hap01[x == "Y"] = 0
hap01[x == "K"] = 0
hap01[x == "R"] = 0
hap01[x == "W"] = 0
hap01[x == "S"] = 0
hap01[x== "N"]=NA
return(hap01)}
require(plyr)
rice <- read.delim(file = './Data/Original_Data/rice_example.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read in file
rice <- rice[nchar(rice$alleles) == 3, ] #get only biallelic snps
rice <- tassel5_to_params(rice, 11, 174) #get population parameters
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
hist(rice$percentHET, main = 'Percent heterozygous')
abline(v = mean(rice$percentHET))
mean(rice$percentHET)
rice <- rice[rice$IR64 %in% c('A', 'G', 'C', 'T') & rice$Azucena %in% c('A', 'G', 'C', 'T') , ]
rice <- rice[rice$IR64 != rice$Azucena, ] #get contrasting markers
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
rice <- rice[rice$present > 0.95 & rice$MAF > 0.45,] #filter
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
require(ASMap)
ab_mat <- NULL #make an AB dataframe to hold results
for(i in 1:nrow(rice)){
print(i)
single_row <- rice[i, ] #Process line by line
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
single_row[, 18:ncol(single_row)] <- gsub('R', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('Y', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('S', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('W', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('K', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('M', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)], as.numeric) #make numeric, turns all others into missing values
single_row[, 18:ncol(single_row)] <- gsub(1, 'A', single_row[, 18:ncol(single_row)]) #convert from number to lettter
single_row[, 18:ncol(single_row)] <- gsub(2, 'B', single_row[, 18:ncol(single_row)])
single_row[, 18:ncol(single_row)] <- gsub(3, 'X', single_row[, 18:ncol(single_row)]) #substitue heterozygote
ab_mat <- rbind(ab_mat, single_row) #write out row
} #get warnings of NA introduced (by design in this case)
rownames(ab_mat) <- ab_mat$rs #give rownames
ab_mat <- ab_mat[, 19:ncol(ab_mat)] #select columns git rid of Nipponbare
ab_mat[ab_mat == 'NA'] <- '-' #conver for ASMAP missing vlaues
write.csv(ab_mat, file = './Data/Intermediate_File/Rice_Markers.csv', row.names = TRUE, quote = FALSE) #write out and read in to get the formatting
rm(ab_mat, rice, single_row, A, B, i)
map <- read.csv(file = './data/Intermediate_File/Rice_Markers.csv', header = TRUE, stringsAsFactors = FALSE, row.names = 1, check.names = FALSE)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-12, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
pdf(file = './data/Figures/Rice_Linkage_Map.pdf', height = 6, width = 8)
plotMap(map_out) #plot the genetic map
dev.off()
map_out$geno$L1$map #look at linkage groups
map_out$geno$L2$map
marker_map <- NULL #get a dataframe to hold map data
for(i in 1:length(map_out$geno)){ #get map data
seg <- map_out$geno[[i]][[2]]
seg <- as.data.frame(seg)
seg$marker_name <- rownames(seg)
colnames(seg)[1] <- 'cM'
rownames(seg) <- NULL
seg$linkage_group <- i
seg <- seg[,c(2, 3, 1)]
marker_map <- rbind(marker_map, seg)
}
ab_mat$marker_name <- rownames(ab_mat)
marker_out <- merge(marker_map, ab_mat, by = 'marker_name')
require(plyr)
rice <- read.delim(file = './Data/Original_Data/rice_example.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read in file
rice <- rice[nchar(rice$alleles) == 3, ] #get only biallelic snps
rice <- tassel5_to_params(rice, 11, 174) #get population parameters
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
hist(rice$percentHET, main = 'Percent heterozygous')
abline(v = mean(rice$percentHET))
mean(rice$percentHET)
rice <- rice[rice$IR64 %in% c('A', 'G', 'C', 'T') & rice$Azucena %in% c('A', 'G', 'C', 'T') , ]
rice <- rice[rice$IR64 != rice$Azucena, ] #get contrasting markers
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
rice <- rice[rice$present > 0.95 & rice$MAF > 0.45,] #filter
hist(rice$MAF, main = 'Rice MAF')
hist(rice$present, main = 'Number of SNPs present')
require(ASMap)
ab_mat <- NULL #make an AB dataframe to hold results
for(i in 1:nrow(rice)){
print(i)
single_row <- rice[i, ] #Process line by line
A <- single_row$IR64 #get allele for Opata
B <- single_row$Azucena #get allele for Synthetic
single_row[, 18:ncol(single_row)] <- gsub(A, 1, single_row[, 18:ncol(single_row)]) #Substitue for allele A 1
single_row[, 18:ncol(single_row)] <- gsub(B, 2, single_row[, 18:ncol(single_row)]) #substitue for allele B 2
single_row[, 18:ncol(single_row)] <- gsub('R', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('Y', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('S', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('W', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('K', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- gsub('M', 3, single_row[, 18:ncol(single_row)]) #Substitue for heterozygous
single_row[, 18:ncol(single_row)] <- sapply(single_row[, 18:ncol(single_row)], as.numeric) #make numeric, turns all others into missing values
single_row[, 18:ncol(single_row)] <- gsub(1, 'A', single_row[, 18:ncol(single_row)]) #convert from number to lettter
single_row[, 18:ncol(single_row)] <- gsub(2, 'B', single_row[, 18:ncol(single_row)])
single_row[, 18:ncol(single_row)] <- gsub(3, 'X', single_row[, 18:ncol(single_row)]) #substitue heterozygote
ab_mat <- rbind(ab_mat, single_row) #write out row
} #get warnings of NA introduced (by design in this case)
rownames(ab_mat) <- ab_mat$rs #give rownames
ab_mat <- ab_mat[, 19:ncol(ab_mat)] #select columns git rid of Nipponbare
ab_mat[ab_mat == 'NA'] <- '-' #conver for ASMAP missing vlaues
write.csv(ab_mat, file = './Data/Intermediate_File/Rice_Markers.csv', row.names = TRUE, quote = FALSE) #write out and read in to get the formatting
rm( rice, single_row, A, B, i)
map <- read.csv(file = './data/Intermediate_File/Rice_Markers.csv', header = TRUE, stringsAsFactors = FALSE, row.names = 1, check.names = FALSE)
map_out <- mstmap(map, pop.type = 'RIL5', dist.fun = 'kosambi', objective.fun = 'COUNT', p.value = 5e-12, noMap.dist = 35, noMap.size = 10, miss.thresh = 10) #play with parameters to make better map
plotMap(map_out)
pdf(file = './data/Figures/Rice_Linkage_Map.pdf', height = 6, width = 8)
plotMap(map_out) #plot the genetic map
dev.off()
map_out$geno$L1$map #look at linkage groups
map_out$geno$L2$map
marker_map <- NULL #get a dataframe to hold map data
for(i in 1:length(map_out$geno)){ #get map data
seg <- map_out$geno[[i]][[2]]
seg <- as.data.frame(seg)
seg$marker_name <- rownames(seg)
colnames(seg)[1] <- 'cM'
rownames(seg) <- NULL
seg$linkage_group <- i
seg <- seg[,c(2, 3, 1)]
marker_map <- rbind(marker_map, seg)
}
ab_mat$marker_name <- rownames(ab_mat)
marker_out <- merge(marker_map, ab_mat, by = 'marker_name')
marker_out <- marker_out[order(marker_out$linkage_group, marker_out$cM),] #order by linkage group and chromosome
write.csv(marker_out, file = './data/Intermediate_File/Rice_Markers_Map.csv', row.names = FALSE, quote = FALSE) #write file out
