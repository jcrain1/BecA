germ[germ$germplasm_id == 'M26', ]$female_parent <- NA
germ[germ$germplasm_id == 'M35', ]$male_parent <- NA
germ[germ$germplasm_id == 'M35', ]$female_parent <- NA
phen <- merge(infile, exp_units, by = c('ID', 'type', 'Gen', 'LOC', 'rep', 'Row', 'Range'), all.x = TRUE) #merge with phenotypic data
lenght(phen$plant_id)
length(unique(phen$plant_id))
View(exp_units)
View(phen)
colnames(phen)
phen <- phen[, c(9:25, 27)]
phen <- merge(infile, exp_units, by = c('ID', 'type', 'Gen', 'LOC', 'rep', 'Row', 'Range'), all.x = TRUE) #merge with phenotypic data
phen <- phen[, c(27, 8:25)]
View(phen)
require(reshpae2)
require(reshape2)
?melt
phen1 <- melt(phen, id = c('plant_id', 'YEAR'))
View(phen1)
2796*17
phen1 <- phen1[order(phen1$plant_id, phen1$variable),]
View(phen1)
View(exp_units)
phen <- phen[order(phen$plant_id, phen$variable),]
phen <- melt(phen, id = c('plant_id', 'YEAR')) #melt data frame by trait_id
phen <- phen[order(phen$plant_id, phen$variable),]
rm(phen1)
View(phen)
install.packages("tinytex")
devtools::install_github('yihui/tinytex')
Sys.which('pdflatex')
system.time()
library(tinytek)
library(tinytex)
unlink('Documents/Class/Genomic_Selection/GS_Notes_cache', recursive = TRUE)
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/IWG_20170927/GBS_SNP_CALLING_IWG/Cycle7/')
setwd('/Users/jcrain/Documents/IWG_20170927/GBS_SNP_CALLING_IWG/Cycle7/')
setwd('/Users/jcrain/Documents/IWG_20170927/GBS_SNP_CALLING_IWG/Cycle7/')
setwd('/Users/jcrain/Documents/IntermediateWheatGrass/IWG_20170927/GBS_SNP_CALLING_IWG/Cycle7/')
source('./scripts/Functions.r')
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/IntermediateWheatGrass/IWG_20170927/GBS_SNP_CALLING_IWG/Cycle7/')
setwd('/Users/jcrain/Documents/IntermediateWheatGrass/IWG_20170927/GBS_SNP_CALLING_IWG/Cycle7/')
key <- read.delim(file= './data/Intermediate_Files/Cycle7_GBS_GS_Key.txt', header = TRUE, stringsAsFactors = FALSE) #load key file
hap <- read.delim(file = './beocat/Cycle7_SNP_Prod_Diff_Call4_Filtered.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #laod genotype file
#Remove any columns that are not in full sample name
null_id <- c('17SGH04181', '17SGH04182', '17SGH04183')
hap <- hap[ , !(colnames(hap) %in% null_id)]
#examine blank wells
#Look at observation per individual and blank wells
blankSNP <- colSums(hap[,grepl("BLANK", colnames(hap), ignore.case=TRUE)] != "N") #max is 12
#blank wells are good
print(max(blankSNP) )#max count in blank well is
SNPnum <- colSums(hap[,12:ncol(hap)] != "N")
#makes histogram
#pdf(file = './data/Output/Figures/Cycle7_SNPs_Per_Individual.pdf', height = 6, width = 8)
hist(SNPnum, xlim = c(0, 22000), breaks = seq(0, 22000, by = 1000), main = 'Cycle 6 & 7 SNPs per Line', sub = 'red is blank wells', xlab = 'Number of SNPs', ylab = 'Number of Individuals')
#makes histogram
#pdf(file = './data/Output/Figures/Cycle7_SNPs_Per_Individual.pdf', height = 6, width = 8)
hist(SNPnum, xlim = c(0, 22000), breaks = seq(0, 22000, by = 1000), main = 'Cycle 6 & 7 SNPs per Line', sub = 'red is blank wells', xlab = 'Number of SNPs', ylab = 'Number of Individuals')
hist(blankSNP, xlim = c(0,22000), breaks = seq(0, 22000, by = 1000), col = 'red', add = TRUE)
#Remove blank wells
hap <- hap[ , !(colnames(hap) %in% names(blankSNP))] #removes 80 columns
#Make population parameters
hap <- tassel5_to_params(hap, 11, 7210)
#population histograms
#pdf(file = './data/Output/Figures/Cycle7_MAF.pdf', height = 6, width = 8)
hist(hap$MAF, main = 'Cycle 6 & 7 MAF', xlab = 'MAF', sub = 'Filtering with > 0.01 MAF, < 30% missing')
#dev.off()
#pdf(file = './data/Output/Figures/Cycle7_Present.pdf', height = 6, width = 8)
hist(hap$present, main = 'Cycle 6 & 7 Present', xlab = 'Present', sub = 'Filtering with > 0.01 MAF, < 30% missing', freq = TRUE)
#dev.off()
#pdf(file = './data/Output/Figures/Cycle7_Percent_Heterozygous.pdf', height = 6, width = 8)
hist(hap$percentHET, main = 'Cycle 6 & 7 HET', xlab = 'Percent Heterozygous', sub = 'Filtering with > 0.01 MAF, < 30% missing')
h <- hist(hap$present, breaks = 20, plot = FALSE) #make histogram of probabilities for present
h$counts <- h$counts/sum(h$counts)
#pdf(file = './data/Output/Figures/Cycle7_Present_By_Percentage.pdf', height = 6, width = 8)
plot(h, freq = TRUE, main = 'Cycle 6 & 7 MAF Probability', xlab = 'Percent Present')
#count percent in each row
#Dendrogram will not work if bad individuals are not cleaned
ind <- colSums(hap[,18:ncol(hap)] != "N")/nrow(hap)
ind <- ind[order(ind)] #order individuals from low to high
hist(ind, main="Percent of SNP's present per individual")
#Remove bad individuals if needed:
ind15 <- ind[grepl('15SAL', names(ind))]
ind15 <- ind15[ind15 < 0.2]
ind17 <- ind[grepl('17SGH', names(ind)) & ind < 0.05]
#Remove 15SAL that are less than 0.2 and 17SGH that are less than 0.05 ~200 individuals
bad_ind <- c(ind15, ind17)
saveRDS(bad_ind, '/Users/jcrain/Desktop/Bad_End1.RDS')
#remove bad individuals
hap <- hap[ , !(colnames(hap) %in% names(bad_ind))] #removes 212 individuals with low or missing data 190 15SAL, 22 17SGH
require(RMySQL)
iwg <- dbConnect(MySQL(),user = 'jcrain', dbname = 'intermediate_wheatgrass', host = 'beocat.cis.ksu.edu', password = 'password', port = 6306) #run this line to connect to the database
simple_query <- "select phenotype.* from phenotype, where phenotype.entity_id = ‘15SAL00001’" #make query statement
output <- dbGetQuery(iwg, simple_query) #run the query
simple_query <- "select phenotype.* from phenotype where phenotype.entity_id = ‘15SAL00001’" #make query statement
output <- dbGetQuery(iwg, simple_query) #run the query
simple_query <- "select phenotype.* from phenotype where phenotype.entity_id = '15SAL00001'" #make query statement
output <- dbGetQuery(iwg, simple_query) #run the query
View(output)
simple_query <- "select phenotype.* from phenotype where phenotype.entity_id = '15SAL000001'" #make query statement
output <- dbGetQuery(iwg, simple_query) #run the query
View(output)
dbDisconnect(iwg
)
rm(list=ls())
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/IWG_ANALYSIS/IWG_PHENOTYPIC_PREPROCESS/IWG_Cycle7/')
setwd('/Users/jcrain/Documents/IWG_ANALYSIS/IWG_PHENOTYPIC_PREPROCESS/IWG_Cycle7/')
source('./scripts/Functions.r')
options(digits = 10) #set options to include lots of digits
training <- read.csv(file = './data/Intermediate_File/Map_table_2017.csv', header = TRUE, stringsAsFactors = FALSE) #load data
c7 <- readRDS(file = './data/RObjects/C7_Greenhouse_Data.RDS') #load greenhouse information
View(training)
c7$source_id <- c7$plant_id #make source_id plant_id number to merge
c7 <- c7[, -c(1:2, 6:15 )] #remove columns that are not needed
plots <- merge(training, c7, by = c('source_id', 'germplasm_id'))
c7 <- readRDS(file = './data/RObjects/C7_Greenhouse_Data.RDS') #load greenhouse information
c7$source_id <- c7$plant_id #make source_id plant_id number to merge
View(c7)
c7 <- c7[, -c(1:2, 6:15 )] #remove columns that are not needed
View(c7)
plots <- merge(training, c7, by = c('source_id', 'germplasm_id'))
View(plots)
colnames(plots)
View(plots)
plots_key <- plots[, c(1:8, 9:11)]
View(plots_key)
plots_key <- plots[, c(1:8, 10:12)]
View(plots_key)
colnames(plots_key)[9] <- experiment_id
colnames(plots_key)[9] <- 'experiment_id'
write.csv(plots_key, file = './data/Finale_File/Cycle7_Plots_Key.csv', row.names = FALSE, quote = FALSE)
rm(c7, phen, plots, training, plots_key)
requrie(asreml)
require(asreml)
pheno <- read.table(file = '/Users/jcrain/Downloads/phenotypes', sep = ' ', header = TRUE)
head(pheno)
gc()
length(unique(pheno$sire))
require(plyr)
pheno_sum <- ddply(pheno, .(sire), .fun = function(x){
means <- colMeans(x[,1:4])
retrun_value <- cbind(means, x[1,6:8])
return(return_value)
})
pheno_sum <- ddply(pheno, .(sire), .fun = function(x){
means <- colMeans(x[,1:4])
return_value <- cbind(means, x[1,6:8])
return(return_value)
})
length(unique((pheno$sire)))
View(pheno_sum)
View(pheno_sum)
x=1768
x=pheno[pheno$sire ==1768,]
View(x)
colMeans(x[,1:4])
y=colMeans(x[,1:4])
y=t(y)
View(y)
pheno_sum <- ddply(pheno, .(sire), .fun = function(x){
means <- t(colMeans(x[,1:4]))
return_value <- cbind(means, x[1,6:8])
return(return_value)
})
View(pheno_sum)
write.csv(pheno_sum, file = '/Users/jcrain/Downloads/Pheno_Summary.csv', row.names = FALSE, quote = FALSE, sep = ',')
write.csv(pheno_sum, file = '/Users/jcrain/Downloads/Pheno_Summary.csv', row.names = FALSE, quote = FALSE)
rm(list=ls(
))
markers <- read.csv(file.choose(), stringsAsFactors = FALSE, header = TRUE)
View(markers)
markers$sequence[1]
nchar(markers$sequence[1])
r <- regexpr('[?//?]' perl = TRUE)
r <- regexpr('[?//?]', perl = TRUE)
r <- regexpr('[?//?]',x = markers$sequence, perl = TRUE)
r <- regexpr('[?//?]', markers$sequence, perl = TRUE)
box <- regmatches(markers$sequence, r)
table(r)
r <- regexpr('[.//.]', markers$sequence, perl = TRUE)
r <- regexpr('[./.]', markers$sequence, perl = TRUE)
r <- regexpr('[\.\/\.]', markers$sequence, perl = TRUE)
r <- regexpr('[\\.\\/\\.]', markers$sequence, perl = TRUE)
box <- regmatches(markers$sequence, r)
table(r)
r <- regexpr('\[\\.\\/\\.\]', markers$sequence, perl = TRUE)
r <- regexpr('\\[\\.\\/\\.\\]', markers$sequence, perl = TRUE)
box <- regmatches(markers$sequence, r)
r <- regexpr('[\\/]', markers$sequence, perl = TRUE)
box <- regmatches(markers$sequence, r)
r <- regexpr('[', markers$sequence, perl = TRUE)
r <- regexpr('\\[', markers$sequence, perl = TRUE)
end <- regexpr('\\]', markers$sequence, perl = TRUE)
start <- regexpr('\\[', markers$sequence, perl = TRUE) #get location of start
table(start)
markers$FASTA <- paste(substr(markers$sequence, 1, start), sep = '')
View(markers)
markers$FASTA[1]
markers$FASTA <- paste(substr(markers$sequence, 1, start -1), substr(markers$sequence, start , start + 1), sep = '')
markers$FASTA[1]
markers$FASTA <- paste(substr(markers$sequence, 1, start -1), substr(markers$sequence, start +1 , start + 1), sep = '')
markers$FASTA[1]
markers$FASTA <- paste(substr(markers$sequence, 1, start -1), substr(markers$sequence, start +1 , start + 1), substr(markers$sequence, end +1, nchar(markers$sequence)) sep = '')
markers$FASTA <- paste(substr(markers$sequence, 1, start -1), substr(markers$sequence, start +1 , start + 1), substr(markers$sequence, end +1, nchar(markers$sequence)), sep = '')
markers$FASTA[1]
check = nchar(markers$sequence) - nchar(markers$FASTA)
table(check)
View(markers)
View(markers)
i=1
header = paste('>', markers$name[i], sep = '')
fasta = markers$FASTA[i]
out = rbind(header, fasta)
View(out)
out = NULL
for(i in 1:nrow(markers)){
print(i)
header = paste('>', markers$name[i], sep = '')
fasta = markers$FASTA[i]
out = rbind(header, fasta)
}
View(out)
print(i)
header = paste('>', markers$name[i], sep = '')
fasta = markers$FASTA[i]
out = rbind(out, header, fasta)
View(out)
out = NULL
for(i in 1:nrow(markers)){
print(i)
header = paste('>', markers$name[i], sep = '')
fasta = markers$FASTA[i]
out = rbind(out, header, fasta)
}
View(out)
write.table(out, file = './Downloads/FASTA_For_Alignment.fa', quote = FALSE, row.names = FALSE)
write.table(out, file = './Downloads/FASTA_For_Alignment.fa', quote = FALSE, row.names = FALSE, col.names = NA)
write.table(out, file = './Downloads/FASTA_For_Alignment.fa', quote = FALSE, row.names = FALSE, col.names = FALSE)
align <- read.table(file = '/Users/jcrain/Desktop/SNP_unique.sam', skip = 45, stringsAsFactors = FALSE, header = FALSE)
View(align)
library(parallel)
detectCores()
require(mlmm.gwas)
?mlmm_allmodels
require(rrBLUP)
?GWAS
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/Analysis/BecA_Class_Genomics/')
setwd('/Users/jcrain/Documents/Analysis/BecA_Class_Genomics/')
options(digits = 10) #set options to include lots of digits
require(parallel)
detectCores()
hap_files <- list.files(pattern = '.hmp.txt$', dir = './data/Original_Data/GAPIT_Tutorial_Data/')
setwd('/Users/jcrain/Documents/Analysis/BecA_Class_Genomics/')
hap_files <- list.files(pattern = '.hmp.txt$', dir = './data/Original_Data/GAPIT_Tutorial_Data/')
hap_files <- list.files(pattern = '.hmp.txt$', path = './data/Original_Data/GAPIT_Tutorial_Data/')
hap_files
hap <- read.delim(file = './data/Original_Data/GAPIT_Tutorial_Data/mdp_genotype_test.hmp.txt', header = TRUE, stringsAsFactors = FALSE)
View(hap)
hap <- read.delim(file = './data/Original_Data/GAPIT_Tutorial_Data/mdp_genotype_test.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
hap <- read.delim(file = './data/Original_Data/GAPIT_Tutorial_Data/mdp_genotype_test.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read the genotype file
View(hap)
table(hap[1, 12:292])
out = hap[1,]
View(out)
out=out[12:292]
out = t(out)
table(out)
hap <- read.delim(file = './data/Original_Data/GAPIT/GAPIT_Hapmap.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read the genotype file
View(hap)
str(hap)
table(hap$`33-16`)
source('./scripts/Functions.r')
hap <- tassel5_to_params(ha-, y = 11, z = 281)
hap <- tassel5_to_params(hap, y = 11, z = 281)
hist(hap$present, main = 'Percent present for each SNP')
hist(hap$present, main = 'Percent present for each SNP', xlab = 'Percent Present')
hist(hap$present)
hist(hap$MAF, main = 'Minor Allele Frequency', xlab = 'Minor allele frequency', ylab = 'Number of individuals')
hist(hap$percentHET)
hist(hap$percentHET, main = 'Percent Heterozygozity', xlab = 'Percent of loci heterozygous')
hap <- hap[hap$MAF > 0.05, ] #greater than 0.05 MAF
colnames(hap)[1:20]
geno <- hap_to_G(hap, y = 17)
dim(geno) #check output
View(geno)
rownames(geno) <- geno$`rs#`
map <- geno[, c('rs`#`', 'chrom', 'pos')]
map <- geno[, c('rs#', 'chrom', 'pos')]
View(map)
geno_for_Gmatrix <- t(geno[,18:ncol(geno)]) #make a matrix to get realized relationship matrix.  rrBLUP wants individual rows and columns of markers for this
require(rrBLUP)
gmat <- A.mat(geno_for_Gmatrix) #make realized relationship matrix
dim(gmat) #check dimensions should be 281 x 281
colnames(geno)
markers <- geno[,c(1, 3, 4, 18:ncol(geno))]
View(markers)
View(gmat)
ksn = read.table(file = './bulk/GAPIT_Tutorial_Data/KSN.txt', header = TRUE)
View(ksn)
ksn = read.table(file = './bulk/GAPIT_Tutorial_Data/KSN.txt', header = TRUE, check.names = FALSE, row.names = 1)
View(ksn)
ksn = read.table(file = './bulk/GAPIT_Tutorial_Data/KSN.txt', header = FALSE, check.names = FALSE, row.names = 1)
View(ksn)
out = gmat[rownames(gmat) %in% rownames(ksn), colnames(gmat) %in% rownames(ksn)]
dim(out)
all(rownames(ksn) == rownames(out))
plot(out[,1], ksn[,1])
cor(out[,1], ksn[,1])
plot(out[2:263,1], ksn[2:263,1])
cor(out[2:263,1], ksn[2:263,1])
phen <- read.table(file = './data/Original_Data/GAPIT/GAPIT_Phenotype.txt', header = TRUE, stringsAsFactors = FALSE)
str(phenotype)
str(phen)
all(phen$Taxa == rownames(gmat))
rownames(gmat)
View(phen)
phen <- phen[phen$Taxa %in% rownames(gmat)]
phen <- phen[phen$Taxa %in% rownames(gmat), ]
phen <- read.table(file = './data/Original_Data/GAPIT/GAPIT_Phenotype.txt', header = TRUE, stringsAsFactors = FALSE)
str(phen)
phen <- phen[phen$Taxa %in% colnames(hap), ] #get phenotypes with genotype
individuals <- colnames(hap) %in% phen$Taxa
individuals <- colnames(hap)[colnames(hap) %in% phen$Taxa] #get individuals to select
info_columns <- colnames(hap)[1:17]
hap <- hap[,c(info_columns, individuals)]
dim(hap)
dim(hap) #check dimensions should be 279 individuals + 17 columns
geno <- hap_to_G(hap, y = 17)
dim(geno) #check output
View(geno)
rownames(geno) <- geno$`rs#` #set row names
geno_for_Gmatrix <- t(geno[,18:ncol(geno)]) #make a matrix to get realized relationship matrix.  rrBLUP wants individual rows and columns of markers for this
gmat <- A.mat(geno_for_Gmatrix) #make realized relationship matrix
dim(gmat) #check dimensions should be 281 x 281
markers <- geno[,c(1, 3, 4, 18:ncol(geno))] #get markers for GWAS.  Markers enter this formula as rows and individuals as columns
View(geno)
View(markers)
geno_pca <- prcomp(markers[, 4:ncol(markers)], scale. = TRUE)
?A.mat
imputed_markers <- A.mat(markers[, 4:ncol(markers)], impute.method = 'mean', MAF = 0.05 )$imputed
imputed_markers <- A.mat(markers[, 4:ncol(markers)], impute.method = 'mean', min.MAF = 0.05 )$imputed
imputed_markers <- A.mat(markers[, 4:ncol(markers)], impute.method = 'mean', min.MAF = 0.05, return.imputed = TRUE )$imputed
View(imputed_markers)
geno_pca <- prcomp(imputed_markers, scale. = TRUE) #run pca
plot(geno_pca)
require(factoextra)
fviz_eig(geno_pca)
std_dev <- geno_pca$sdev #extract standard deviation of each pC
pr_var <- std_dev^2 #compute variance std*std
prop_varex <- pr_var/sum(pr_var) #proportion of variance explained
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
screeplot(geno_pca, npcs = 100, type = 'line')
View(imputed_markers)
all(rownames(imputed_markers) == rownames(gmat))
all(colnames(imputed_markers) == rownames(gmat))
all(rownames(gmat) == phen$Taxa)
phen <- phen[match(rownames(gmat), phen$Taxa), ]
all(rownames(gmat) == phen$Taxa) #need to order phenotype file
View(markers)
map <- geno[, c('rs`#`', 'chrom', 'pos')]
map <- geno[, c('rs`#`', 'chrom', 'pos')] #snp, chromosome and position
View(geno)
map <- geno[, c('rs#', 'chrom', 'pos')] #snp, chromosome and position
dim(imputed_markers)
imputed_marker <- cbind(map, imputed_marker)
imputed_markers <- cbind(map, imputed_markers)
colnames(phene)
colnames(phen)
rrout <- GWAS(phen[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE, n.PC = 3)
rrout_bad <- GWAS(phen[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE) #run with no population structure ERROR
rrout <- GWAS(phen[, 1:4], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE, n.PC = 3)  #run with principal components
rrout_bad <- GWAS(phen[, 1:4], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE) #run with no population structure ERROR
rrout_many_pc <- GWAS(phen[, 1:4], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE, n.PC = 10)  #run with principal components
View(rrout_many_pc)
010^-0.37
10^-4.6
max(rrout$EarHT)
mar(rrout$dpoll)
max(rrout$dpoll)
max(rrout$EarDia)
max(rrout_many_pc$EarHT)
max(rrout_many_pc$dpoll)
max(rrout_many_pc$EarDia)
max(rrout_bad$EarHT)
gwas_perm_result <- NULL
phen_shuffle <- sample(1:nrow(phen), size = max(nrow_phen), replace = FALSE)
phen_shuffle <- sample(1:nrow(phen), size = max(nrow(phen)), replace = FALSE)
head(phen)
phen_shuffle <- phen[phen_shuffle, ]
head(phen_shuffle)
max_value <- max(rrout$EarHT)
gwas_perm_result <- NULL #start a dataframe to store results
phen_shuffle <- sample(1:nrow(phen), size = max(nrow(phen)), replace = FALSE) #get a random sample order
phen_shuffle <- phen[phen_shuffle, ] #shuffle phenotypes
rrout <- GWAS(phen_shuffle[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = FALSE, n.PC = 3)  #run with principal components
View(rrout)
max_value <- max(rrout$EarHT) #extract largest marker effect
rrout <- GWAS(phen[, 1:4], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE, n.PC = 3)  #run with principal components
max(rrout$EarDia)
View(rrout)
max(rrout$EarHT)
phen_shuffle <- sample(1:nrow(phen), size = max(nrow(phen)), replace = FALSE) #get a random sample order
phen_shuffle <- sample(1:nrow(phen), size = max(nrow(phen)), replace = FALSE) #get a random sample order
phen_shuffle <- phen[phen_shuffle, ] #shuffle phenotypes
rrout <- GWAS(phen_shuffle[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = FALSE, n.PC = 3)  #run with principal components
max_value <- max(rrout$EarHT) #extract largest marker effect
for(i in 1:1000){ #do 1000 iterations
phen_shuffle <- sample(1:nrow(phen), size = max(nrow(phen)), replace = FALSE) #get a random sample order
phen_shuffle <- phen[phen_shuffle, ] #shuffle phenotypes
#set up model
rrout <- GWAS(phen_shuffle[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = FALSE, n.PC = 3)  #run with principal components
max_value <- max(rrout$EarHT) #extract largest marker effect
gwas_perm_result <- rbind(gwas_perm_result, max_value) #save data outside the loop
}
View(gwas_perm_result)
phen_names <- phen$Taxa
phen_shuffle$Taxa <- phen_names #shuffle names
rrout <- GWAS(phen_shuffle[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = FALSE, n.PC = 3)  #run with principal components
max_value <- max(rrout$EarHT) #extract largest marker effect
gwas_perm_result <- NULL #start a dataframe to store results
for(i in 1:1000){ #do 1000 iterations
phen_shuffle <- sample(1:nrow(phen), size = max(nrow(phen)), replace = FALSE) #get a random sample order
phen_names <- phen$Taxa #get original names
phen_shuffle <- phen[phen_shuffle, ] #shuffle phenotypes
phen_shuffle$Taxa <- phen_names #shuffle names
#set up model
rrout <- GWAS(phen_shuffle[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = FALSE, n.PC = 3)  #run with principal components
max_value <- max(rrout$EarHT) #extract largest marker effect
gwas_perm_result <- rbind(gwas_perm_result, max_value) #save data outside the loop
}
View(gwas_perm_result)
gwas_perm_result <- NULL #start a dataframe to store results
for(i in 1:1000){ #do 1000 iterations
phen_shuffle <- sample(1:nrow(phen), size = max(nrow(phen)), replace = FALSE) #get a random sample order
phen_names <- phen$Taxa #get original names
phen_shuffle <- phen[phen_shuffle, ] #shuffle phenotypes
phen_shuffle$Taxa <- phen_names #shuffle names
#set up model
rrout <- GWAS(phen_shuffle[, 1:2], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = FALSE, n.PC = 3)  #run with principal components
max_value <- max(rrout$EarHT) #extract largest marker effect
gwas_perm_result <- rbind(gwas_perm_result, max_value) #save data outside the loop
}
hist(gwas_perm_result, main = '1000 permutations', xlab = 'Most Significant Value', sub = 'Vertical line is GWAS result')
dev.off()
hist(gwas_perm_result, main = '1000 permutations', xlab = 'Most Significant Value', sub = 'Vertical line is GWAS result')
abline(v = max(rrout$EarHT))
rrout <- GWAS(phen[, 1:4], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE, n.PC = 3)  #run with principal components
dev.off()
abline(v = max(rrout$EarHT))
hist(gwas_perm_result, main = '1000 permutations', xlab = 'Most Significant Value', sub = 'Vertical line is GWAS result')
abline(v = max(rrout$EarHT))
gwas_perm_result <- gwas_perm_result[order(-gwas_perm_result)] #order result
gwas_perm_result[50] #print out 5% (p < 0.05)
max(rrout$EarHT)
gwas_perm_result
setwd('/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/Tour_GWAS/')
setwd('/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/Tour_GWAS/')
options(digits = 10) #set options to include lots of digits
source('./scripts/Functions.r')
source('./scripts/Functions.r')
require(rrBLUP)
hap <- read.delim(file = './data/Original_Data/GAPIT/GAPIT_Hapmap.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read the genotype file
hap <- read.delim(file = './data/Original_Data/GAPIT_Hapmap.hmp.txt', header = TRUE, stringsAsFactors = FALSE, check.names = FALSE) #read the genotype file
str(hap)
hap <- tassel5_to_params(hap, y = 11, z = 281) #get population parameters
hist(hap$present)
hist(hap$present, main = 'Percent present for each SNP', xlab = 'Percent Present')
hist(hap$MAF, main = 'Minor Allele Frequency', xlab = 'Minor allele frequency', ylab = 'Number of individuals')
hist(hap$percentHET)
hist(hap$percentHET, main = 'Percent Heterozygozity', xlab = 'Percent of loci heterozygous')
hap <- hap[hap$MAF > 0.05, ] #greater than 0.05 MAF
map <- geno[, c('rs#', 'chrom', 'pos')] #snp, chromosome and position
phen <- read.table(file = './data/Original_Data/GAPIT_Phenotype.txt', header = TRUE, stringsAsFactors = FALSE)
str(phen)
phen <- phen[phen$Taxa %in% colnames(hap), ] #get phenotypes with genotype
individuals <- colnames(hap)[colnames(hap) %in% phen$Taxa] #get individuals to select
info_columns <- colnames(hap)[1:17] #get columns of information
hap <- hap[,c(info_columns, individuals)] #remove individuals from hap that do not have phenotype data
dim(hap) #check dimensions should be 279 individuals + 17 columns
geno <- hap_to_G(hap, y = 17)
dim(geno) #check output
rownames(geno) <- geno$`rs#` #set row names
geno_for_Gmatrix <- t(geno[,18:ncol(geno)]) #make a matrix to get realized relationship matrix.  rrBLUP wants individual rows and columns of markers for this
gmat <- A.mat(geno_for_Gmatrix) #make realized relationship matrix
dim(gmat) #check dimensions should be 281 x 281
markers <- geno[,c(1, 3, 4, 18:ncol(geno))] #get markers for GWAS.  Markers enter this formula as rows and individuals as columns
require(factoextra)
imputed_markers <- A.mat(markers[, 4:ncol(markers)], impute.method = 'mean', min.MAF = 0.05, return.imputed = TRUE )$imputed
geno_pca <- prcomp(imputed_markers, scale. = TRUE) #run pca
fviz_eig(geno_pca) #scree plot with factoextra
std_dev <- geno_pca$sdev #extract standard deviation of each pC
pr_var <- std_dev^2 #compute variance std*std
prop_varex <- pr_var/sum(pr_var) #proportion of variance explained
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
screeplot(geno_pca, npcs = 100, type = 'line') #screeplot of all PC
plot(cumsum(prop_varex[1:10,]), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
plot(cumsum(prop_varex[1:10]), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
all(colnames(imputed_markers) == rownames(gmat))
all(rownames(gmat) == phen$Taxa) #need to order phenotype file
phen <- phen[match(rownames(gmat), phen$Taxa), ] #order phenotype data
all(rownames(gmat) == phen$Taxa) #ordered
imputed_markers <- cbind(map, imputed_markers)
rrout <- GWAS(phen[, 1:4], geno = imputed_markers, K=gmat, min.MAF = 0.05, n.core=3, plot = TRUE, n.PC = 3)  #run with principal components
rm(list=ls())
