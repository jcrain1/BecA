#set out
gs_pred <- rbind(gs_pred, preds)
} #close for loop
accuracy <- merge(phen, gs_pred, by = 'GID_DNA') #merge prediction data set and original phenotyep data set
pdf(file = './data/Figures/GS_Accuracy_Plot.pdf', height = 6, width = 8)
plot(accuracy$gy_effect, accuracy$preds, xlab = 'Observed value', ylab = 'Predicted value') #quick graph
abline(lm(accuracy$preds~accuracy$gy_effect), col = 'red') #add trendline
dev.off()
cor(accuracy$gy_effect, accuracy$preds) #correlation or accuracy
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/GS_Wheat/')
setwd('/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/GS_Wheat/')
options(digits = 10) #set options to include lots of digits
modified_hap <- function(x="hap matrix", y="columns to skip", z="population number"){
geno=x
#recount allele A and B and het
alleleA=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 3, 3) & geno[,(y+1):ncol(geno)]!="N") #only counts what is not allele B and missing.  i.e. counts allele A and various calls for heterozygous
alleleB=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 1, 1) & geno[,(y+1):ncol(geno)]!="N")
het=rowSums(geno[,(y+1):ncol(geno)] == "M") + rowSums( geno[,(y+1):ncol(geno)] ==   "R") + rowSums(geno[,(y+1):ncol(geno)] ==  "W") + rowSums(geno[,(y+1):ncol(geno)] ==  "K") + rowSums(geno[,(y+1):ncol(geno)] ==  "S") + rowSums(geno[,(y+1):ncol(geno)] ==  "Y") + rowSums(geno[,(y+1):ncol(geno)] ==  "H")
present=1-(rowSums(geno[,(y+1):ncol(geno)]=="N")/z)
MAF=apply(cbind(((alleleA-het)*2+het), (alleleB-het)*2+het), 1, min)/apply(
cbind(((alleleA-het)*2+het), ((alleleB-het)*2+het)), 1, sum)
percentHet=het/apply(cbind(alleleA-het, alleleB-het, het), 1, sum)
return(cbind.data.frame(geno[,1:y], "alleleA"=alleleA, "alleleB"=alleleB, "het"=het, "present"= present, "MAF"=MAF, "percentHET"=percentHet, geno[,(y+1):ncol(geno)]))
}
hap_to_G_modified  <- function(x="hap matrix", y="number of columns of information"){
##From Prasana, pulls out first allele for a and second for b
a = substring(x$alleles,1,1)
#Checks the frequency of the alleles if the second allele is more frequent it is substitued
a[x$alleleA<x$alleleB] = substring(x$alleles,3,3)[x$alleleA<x$alleleB]
#Same thing with the second allele
b = substring(x$alleles,3,3)
b[x$alleleA<x$alleleB] = substring(x$alleles,1,1)[x$alleleA<x$alleleB]
#Checks to make sure all alleles are one or the other
#print(paste("If 0 all alleles are accounted for: ", sum(a == b), sep=""))
## Turn into letter matrix for mapping
#makes a copy of the hap matrix
hap01 = x
#sets all allele values to NA
hap01[,(y+1):ncol(hap01)]=NA
## Turn allele a and allele b into 1 and -1.  Het into 0
#line by line if a line is a then it places 1 in hap01 for the allele
hap01[x == a] = 1
hap01[x == b] = -1
hap01[x == "M"] = 0
hap01[x == "Y"] = 0
hap01[x == "K"] = 0
hap01[x == "R"] = 0
hap01[x == "W"] = 0
hap01[x == "S"] = 0
hap01[x == "H"] = 0
hap01[x== "N"]=NA
return(hap01)}
gbs <- read.table(file = './data/Original_Data/tpg12-06-0006-dataset-s2', check.names = FALSE, header = TRUE, sep = ',', quote = '\"', row.names = 1, stringsAsFactors = FALSE)
any(duplicated(gbs$rs)) #see if there are duplicated matches
gbs <- gbs[!duplicated(gbs$rs), ] #remove multiple SNPs in the same strings
gbs <- modified_hap(gbs, 3, 254) #calculates population parameters
snp <- t(gbs[1, ]) #get one SNP
alleleA <- sum(snp[10:263] == 'A') + sum(snp[10:263] == 'H')#count allele in position 1
het <- sum(snp[10:263] == 'H') #count heterozygous
alleleB <- sum(snp[10:263] == 'T') + sum(snp[10:263] == 'H')#count allele in position 2
missing <- sum(snp[10:263] == 'N') #count missing calls
scored <- sum(snp[10:263] != 'N') #number of individuals not missing
present <- 1 - missing/254 #number present
maf <- min(((alleleA - het)*2 + het), ((alleleB - het)*2 + het))/sum((alleleA - het)*2, het, (alleleB -het)*2)
perHet <- het/scored
hist(gbs$MAF) #graph minor allele frequency
gbs <- gbs[gbs$MAF > 0.05, ]
hist(gbs$present)
gbs <- gbs[gbs$present > 0.3, ]
hist(gbs$percentHET)
marker <- hap_to_G_modified(gbs, 9) #convert to marker matrix
phen <- read.delim(file = './data/Original_Data/tpg12-06-0006-dataset-s1_Phenotype.csv', header = TRUE)
require(rrBLUP)
set.seed(123)
phen$fold <- sample(1:7, size = 254, replace = TRUE)
phen$PEDIGREE <- as.factor(phen$PEDIGREE) #NEW to use pedigree for fold validation
phen$fold <-as.numeric(phen$PEDIGREE) #NEW
require(rrBLUP)
rownames(marker) <- marker$rs #set row names
geno <- t(marker[, 10:ncol(marker)])
gmat <- rrBLUP::A.mat(geno) #make genomic relationship matrix
phen$GID <- paste('GID', phen$GID, sep = '') #make GIDs match
phen <- phen[match(phen$GID, rownames(geno)), ] #make sure rownames match
all(phen$GID == colnames(gmat))
gs_pred = NULL
i=1
for(i in 1:max(phen$fold)){ #enter for loop #MODIFIED
x = phen
print(paste('Loop Progress:', i, sep=' ')) #check progress
phenoPredict <- x[x$fold == i ,] #get phenoPredict group
phenoTrain <- x[!x$fold == i , ] #get phenoTrain group
#order marker matrix by rbind values of phenoTrain and phenoPredict
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
#order genotypic data
g <- geno[match(ord, rownames(geno)),]
print(paste('Check that marker matrix is in order: ', all(as.character(phenoTrain$plant_id) == rownames(g)[1:nrow(phenoTrain)]), sep='')) #check
print(paste('Check that genotype matrix is in order: ', all(phenoPredict$plant_id == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)]) , sep=''))
#rrBLUP for genomic additive relationship matrix
mat <- A.mat(g)
##prepare phenotype frame
phenoPredict[ , 'Drought_Yield'] <- NA #set phenotype value to NA
##make phenotypic frame
phenotypic <- rbind(phenoTrain, phenoPredict)
#check that phenotypic and genotypic order are correct
print(paste('Check that all phenotype data is in order:  ', all(rownames(g) == phenotypic$plant_id), sep=''))
ans <- kin.blup(phenotypic, K = mat, geno = "GID" , pheno ="Drought_Yield") #run rrBLUP
preds <- ans$pred #extract prediction
preds <- preds[names(preds) %in% phenoPredict$GID] #get only predictions
preds <- as.data.frame(preds) #make into a dataframe
preds$GID <- rownames(preds) #get plant_id
rownames(preds) <- NULL #set rownames as NULL
#set out
gs_pred <- rbind(gs_pred, preds)
}
rm(list=ls())
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/GS_Wheat/')
setwd('/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/GS_Wheat/')
options(digits = 10) #set options to include lots of digits
modified_hap <- function(x="hap matrix", y="columns to skip", z="population number"){
geno=x
#recount allele A and B and het
alleleA=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 3, 3) & geno[,(y+1):ncol(geno)]!="N") #only counts what is not allele B and missing.  i.e. counts allele A and various calls for heterozygous
alleleB=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 1, 1) & geno[,(y+1):ncol(geno)]!="N")
het=rowSums(geno[,(y+1):ncol(geno)] == "M") + rowSums( geno[,(y+1):ncol(geno)] ==   "R") + rowSums(geno[,(y+1):ncol(geno)] ==  "W") + rowSums(geno[,(y+1):ncol(geno)] ==  "K") + rowSums(geno[,(y+1):ncol(geno)] ==  "S") + rowSums(geno[,(y+1):ncol(geno)] ==  "Y") + rowSums(geno[,(y+1):ncol(geno)] ==  "H")
present=1-(rowSums(geno[,(y+1):ncol(geno)]=="N")/z)
MAF=apply(cbind(((alleleA-het)*2+het), (alleleB-het)*2+het), 1, min)/apply(
cbind(((alleleA-het)*2+het), ((alleleB-het)*2+het)), 1, sum)
percentHet=het/apply(cbind(alleleA-het, alleleB-het, het), 1, sum)
return(cbind.data.frame(geno[,1:y], "alleleA"=alleleA, "alleleB"=alleleB, "het"=het, "present"= present, "MAF"=MAF, "percentHET"=percentHet, geno[,(y+1):ncol(geno)]))
}
hap_to_G_modified  <- function(x="hap matrix", y="number of columns of information"){
##From Prasana, pulls out first allele for a and second for b
a = substring(x$alleles,1,1)
#Checks the frequency of the alleles if the second allele is more frequent it is substitued
a[x$alleleA<x$alleleB] = substring(x$alleles,3,3)[x$alleleA<x$alleleB]
#Same thing with the second allele
b = substring(x$alleles,3,3)
b[x$alleleA<x$alleleB] = substring(x$alleles,1,1)[x$alleleA<x$alleleB]
#Checks to make sure all alleles are one or the other
#print(paste("If 0 all alleles are accounted for: ", sum(a == b), sep=""))
## Turn into letter matrix for mapping
#makes a copy of the hap matrix
hap01 = x
#sets all allele values to NA
hap01[,(y+1):ncol(hap01)]=NA
## Turn allele a and allele b into 1 and -1.  Het into 0
#line by line if a line is a then it places 1 in hap01 for the allele
hap01[x == a] = 1
hap01[x == b] = -1
hap01[x == "M"] = 0
hap01[x == "Y"] = 0
hap01[x == "K"] = 0
hap01[x == "R"] = 0
hap01[x == "W"] = 0
hap01[x == "S"] = 0
hap01[x == "H"] = 0
hap01[x== "N"]=NA
return(hap01)}
gbs <- read.table(file = './data/Original_Data/tpg12-06-0006-dataset-s2', check.names = FALSE, header = TRUE, sep = ',', quote = '\"', row.names = 1, stringsAsFactors = FALSE)
any(duplicated(gbs$rs)) #see if there are duplicated matches
gbs <- gbs[!duplicated(gbs$rs), ] #remove multiple SNPs in the same strings
gbs <- modified_hap(gbs, 3, 254) #calculates population parameters
snp <- t(gbs[1, ]) #get one SNP
alleleA <- sum(snp[10:263] == 'A') + sum(snp[10:263] == 'H')#count allele in position 1
het <- sum(snp[10:263] == 'H') #count heterozygous
alleleB <- sum(snp[10:263] == 'T') + sum(snp[10:263] == 'H')#count allele in position 2
missing <- sum(snp[10:263] == 'N') #count missing calls
scored <- sum(snp[10:263] != 'N') #number of individuals not missing
present <- 1 - missing/254 #number present
maf <- min(((alleleA - het)*2 + het), ((alleleB - het)*2 + het))/sum((alleleA - het)*2, het, (alleleB -het)*2)
perHet <- het/scored
hist(gbs$MAF) #graph minor allele frequency
gbs <- gbs[gbs$MAF > 0.05, ]
hist(gbs$present)
gbs <- gbs[gbs$present > 0.3, ]
hist(gbs$percentHET)
marker <- hap_to_G_modified(gbs, 9) #convert to marker matrix
phen <- read.delim(file = './data/Original_Data/tpg12-06-0006-dataset-s1_Phenotype.csv', header = TRUE)
require(rrBLUP)
require(rrBLUP)
rownames(marker) <- marker$rs #set row names
geno <- t(marker[, 10:ncol(marker)])
gmat <- rrBLUP::A.mat(geno) #make genomic relationship matrix
phen$GID <- paste('GID', phen$GID, sep = '') #make GIDs match
phen <- phen[match(phen$GID, rownames(geno)), ] #make sure rownames match
all(phen$GID == colnames(gmat))
all(phen$GID == colnames(gmat)  && !is.null(phen$GID))
set.seed(123)
phen$fold <- sample(1:7, size = 254, replace = TRUE)
i=1;j=1;k=1
t_number <- cv_number[i] #get the number of individuals in training pop
cv_number=1
t_number <- cv_number[i] #get the number of individuals in training pop
phen$train_pop <- sample(x = t_number, size = nrow(phen), replace = TRUE) #get a random sample of the markers
x = phen
print(paste('Training Population CV:', t_number, 'Iteration:', j, 'Loop progress:', k, sep=' ')) #check progress
phenoPredict <- x[x$train_pop == k ,] #get phenoPredict group
phenoTrain <- x[!x$train_pop == k , ] #get phenoTrain group
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
g <- geno[match(ord, rownames(geno)),]
print(paste('Check that phenoTrain is in order with marker matrix is in order: ', all(as.character(phenoTrain$GID) == rownames(g)[1:nrow(phenoTrain)]  && !is.null(phenoTrain$GID)), sep='')) #check
print(paste('Check that phenoPredict is in order with matrix is in order: ', all(phenoPredict$GID == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)] && !is.null(phenoTrain$GID)) , sep=''))
mat <- A.mat(g)
set.seed(123)
phen$fold <- sample(1:7, size = 254, replace = TRUE)
t_number <- cv_number[i] #get the number of individuals in training pop
phen$train_pop <- sample(x = t_number, size = nrow(phen), replace = TRUE) #get a random sample of the markers
x = phen
print(paste('Training Population CV:', t_number, 'Iteration:', j, 'Loop progress:', k, sep=' ')) #check progress
View(phen)
phenoPredict <- x[x$train_pop == k ,] #get phenoPredict group
phenoTrain <- x[!x$train_pop == k , ] #get phenoTrain group
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
g <- geno[match(ord, rownames(geno)),]
print(paste('Check that phenoTrain is in order with marker matrix is in order: ', all(as.character(phenoTrain$GID) == rownames(g)[1:nrow(phenoTrain)]  && !is.null(phenoTrain$GID)), sep='')) #check
phenoTrain <- x[!x$train_pop == k , ] #get phenoTrain group
View(x)
t_number=2
x = phen
print(paste('Training Population CV:', t_number, 'Iteration:', j, 'Loop progress:', k, sep=' ')) #check progress
phenoPredict <- x[x$train_pop == k ,] #get phenoPredict group
phenoTrain <- x[!x$train_pop == k , ] #get phenoTrain group
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
g <- geno[match(ord, rownames(geno)),]
print(paste('Check that phenoTrain is in order with marker matrix is in order: ', all(as.character(phenoTrain$GID) == rownames(g)[1:nrow(phenoTrain)]  && !is.null(phenoTrain$GID)), sep='')) #check
print(paste('Check that phenoPredict is in order with matrix is in order: ', all(phenoPredict$GID == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)] && !is.null(phenoTrain$GID)) , sep=''))
cv_number=1
t_number <- cv_number[i] #get the number of individuals in training pop
cv_number <- c(2, 4, 5, 6, 8, 10, 15, 20)
t_number <- cv_number[i] #get the number of individuals in training pop
phen$train_pop <- sample(x = t_number, size = nrow(phen), replace = TRUE) #get a random sample of the markers
x = phen
print(paste('Training Population CV:', t_number, 'Iteration:', j, 'Loop progress:', k, sep=' ')) #check progress
phenoPredict <- x[x$train_pop == k ,] #get phenoPredict group
phenoTrain <- x[!x$train_pop == k , ] #get phenoTrain group
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
g <- geno[match(ord, rownames(geno)),]
print(paste('Check that phenoTrain is in order with marker matrix is in order: ', all(as.character(phenoTrain$GID) == rownames(g)[1:nrow(phenoTrain)]  && !is.null(phenoTrain$GID)), sep='')) #check
print(paste('Check that phenoPredict is in order with matrix is in order: ', all(phenoPredict$GID == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)] && !is.null(phenoTrain$GID)) , sep=''))
mat <- A.mat(g)
phenoPredict[ , 'Drought_Yield'] <- NA #set phenotype value to NA
phenotypic <- rbind(phenoTrain, phenoPredict)
print(paste('Check that all phenotype data and genotype data is in the same order:  ', all(rownames(g) == phenotypic$GID && !is.null(phenoTrain$GID)), sep=''))
ans <- kin.blup(phenotypic, K = mat, geno = "GID" , pheno = "Drought_Yield") #run rrBLUP
preds <- ans$pred #extract prediction
preds <- preds[names(preds) %in% phenoPredict$GID] #get only predictions
preds <- as.data.frame(preds) #make into a dataframe
preds$GID <- rownames(preds) #get plant_id
rownames(preds) <- NULL #set rownames as NULL
preds$training_fold <- t_number #set marker density
preds$iteration <- j #set iteration number
train_number_out <- rbind(train_number_out, preds)
for(k in 1:max(phen$train_pop)){
x = phen
print(paste('Training Population CV:', t_number, 'Iteration:', j, 'Loop progress:', k, sep=' ')) #check progress
phenoPredict <- x[x$train_pop == k ,] #get phenoPredict group
phenoTrain <- x[!x$train_pop == k , ] #get phenoTrain group
#order marker matrix by rbind values of phenoTrain and phenoPredict
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
#order genotypic data
g <- geno[match(ord, rownames(geno)),]
print(paste('Check that phenoTrain is in order with marker matrix is in order: ', all(as.character(phenoTrain$GID) == rownames(g)[1:nrow(phenoTrain)]  && !is.null(phenoTrain$GID)), sep='')) #check
print(paste('Check that phenoPredict is in order with matrix is in order: ', all(phenoPredict$GID == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)] && !is.null(phenoTrain$GID)) , sep=''))
#rrBLUP for genomic additive relationship matrix
mat <- A.mat(g)
##prepare phenotype frame
phenoPredict[ , 'Drought_Yield'] <- NA #set phenotype value to NA
##make phenotypic frame
phenotypic <- rbind(phenoTrain, phenoPredict)
#check that phenotypic and genotypic order are correct
print(paste('Check that all phenotype data and genotype data is in the same order:  ', all(rownames(g) == phenotypic$GID && !is.null(phenoTrain$GID)), sep=''))
ans <- kin.blup(phenotypic, K = mat, geno = "GID" , pheno = "Drought_Yield") #run rrBLUP
preds <- ans$pred #extract prediction
preds <- preds[names(preds) %in% phenoPredict$GID] #get only predictions
preds <- as.data.frame(preds) #make into a dataframe
preds$GID <- rownames(preds) #get plant_id
rownames(preds) <- NULL #set rownames as NULL
preds$training_fold <- t_number #set marker density
preds$iteration <- j #set iteration number
#set out
train_number_out <- rbind(train_number_out, preds)
}
dart <- read.csv(file = './data/Original_Data//tpg12-06-0006-DArT.csv', check.names = FALSE, header = TRUE, row.names = 1)
rownames(dart) <- paste('GID', rownames(dart), sep = '') #make rownames correct
all(rownames(dart %in% phen$GID))
dart <- dart[match(rownames(dart), phen$GID), ] #order
all(rownames(dart) == phen$GID)
dart_drought = NULL
View(x)
for(i in 1:7){ #enter for loop
x = phen
print(paste('Loop progress:', i, sep=' ')) #check progress
phenoPredict <- x[x$fold == i ,] #get phenoPredict group
phenoTrain <- x[!x$fold == i , ] #get phenoTrain group
#order marker matrix by rbind values of phenoTrain and phenoPredict
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
#order genotypic data
g <- dart[match(ord, rownames(dart)),]
print(paste('Check that marker matrix is in order: ', all(as.character(phenoTrain$plant_id) == rownames(g)[1:nrow(phenoTrain)]), sep='')) #check
print(paste('Check that genotype matrix is in order: ', all(phenoPredict$plant_id == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)]) , sep=''))
#rrBLUP for genomic additive relationship matrix
mat <- A.mat(g)
##prepare phenotype frame
phenoPredict[ , 'Drought_Yield'] <- NA #set phenotype value to NA
##make phenotypic frame
phenotypic <- rbind(phenoTrain, phenoPredict)
#check that phenotypic and genotypic order are correct
print(paste('Check that all phenotype data is in order:  ', all(rownames(g) == phenotypic$plant_id), sep=''))
ans <- kin.blup(phenotypic, K = mat, geno = "GID" , pheno ="Drought_Yield") #run rrBLUP
preds <- ans$pred #extract prediction
preds <- preds[names(preds) %in% phenoPredict$GID] #get only predictions
preds <- as.data.frame(preds) #make into a dataframe
preds$GID <- rownames(preds) #get plant_id
rownames(preds) <- NULL #set rownames as NULL
#set out
dart_drought <- rbind(dart_drought, preds)
}
dart_drought <- merge(phen, dart_drought, by = 'GID')
plot(dart_drought$Drought_Yield, dart_drought$preds)
cor(dart_drought$Drought_Yield, dart_drought$preds)
knitr::opts_knit$set(root.dir = '/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/GS_Wheat/')
setwd('/Users/jcrain/Documents/Class/Genomic_Selection/Github/BecA/GS_Wheat/')
options(digits = 10) #set options to include lots of digits
modified_hap <- function(x="hap matrix", y="columns to skip", z="population number"){
geno=x
#recount allele A and B and het
alleleA=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 3, 3) & geno[,(y+1):ncol(geno)]!="N") #only counts what is not allele B and missing.  i.e. counts allele A and various calls for heterozygous
alleleB=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 1, 1) & geno[,(y+1):ncol(geno)]!="N")
het=rowSums(geno[,(y+1):ncol(geno)] == "M") + rowSums( geno[,(y+1):ncol(geno)] ==   "R") + rowSums(geno[,(y+1):ncol(geno)] ==  "W") + rowSums(geno[,(y+1):ncol(geno)] ==  "K") + rowSums(geno[,(y+1):ncol(geno)] ==  "S") + rowSums(geno[,(y+1):ncol(geno)] ==  "Y") + rowSums(geno[,(y+1):ncol(geno)] ==  "H")
present=1-(rowSums(geno[,(y+1):ncol(geno)]=="N")/z)
MAF=apply(cbind(((alleleA-het)*2+het), (alleleB-het)*2+het), 1, min)/apply(
cbind(((alleleA-het)*2+het), ((alleleB-het)*2+het)), 1, sum)
percentHet=het/apply(cbind(alleleA-het, alleleB-het, het), 1, sum)
return(cbind.data.frame(geno[,1:y], "alleleA"=alleleA, "alleleB"=alleleB, "het"=het, "present"= present, "MAF"=MAF, "percentHET"=percentHet, geno[,(y+1):ncol(geno)]))
}
hap_to_G_modified  <- function(x="hap matrix", y="number of columns of information"){
##From Prasana, pulls out first allele for a and second for b
a = substring(x$alleles,1,1)
#Checks the frequency of the alleles if the second allele is more frequent it is substitued
a[x$alleleA<x$alleleB] = substring(x$alleles,3,3)[x$alleleA<x$alleleB]
#Same thing with the second allele
b = substring(x$alleles,3,3)
b[x$alleleA<x$alleleB] = substring(x$alleles,1,1)[x$alleleA<x$alleleB]
#Checks to make sure all alleles are one or the other
#print(paste("If 0 all alleles are accounted for: ", sum(a == b), sep=""))
## Turn into letter matrix for mapping
#makes a copy of the hap matrix
hap01 = x
#sets all allele values to NA
hap01[,(y+1):ncol(hap01)]=NA
## Turn allele a and allele b into 1 and -1.  Het into 0
#line by line if a line is a then it places 1 in hap01 for the allele
hap01[x == a] = 1
hap01[x == b] = -1
hap01[x == "M"] = 0
hap01[x == "Y"] = 0
hap01[x == "K"] = 0
hap01[x == "R"] = 0
hap01[x == "W"] = 0
hap01[x == "S"] = 0
hap01[x == "H"] = 0
hap01[x== "N"]=NA
return(hap01)}
rm(list=ls())
modified_hap <- function(x="hap matrix", y="columns to skip", z="population number"){
geno=x
#recount allele A and B and het
alleleA=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 3, 3) & geno[,(y+1):ncol(geno)]!="N") #only counts what is not allele B and missing.  i.e. counts allele A and various calls for heterozygous
alleleB=rowSums(geno[,(y+1):ncol(geno)]!=substring(geno$alleles, 1, 1) & geno[,(y+1):ncol(geno)]!="N")
het=rowSums(geno[,(y+1):ncol(geno)] == "M") + rowSums( geno[,(y+1):ncol(geno)] ==   "R") + rowSums(geno[,(y+1):ncol(geno)] ==  "W") + rowSums(geno[,(y+1):ncol(geno)] ==  "K") + rowSums(geno[,(y+1):ncol(geno)] ==  "S") + rowSums(geno[,(y+1):ncol(geno)] ==  "Y") + rowSums(geno[,(y+1):ncol(geno)] ==  "H")
present=1-(rowSums(geno[,(y+1):ncol(geno)]=="N")/z)
MAF=apply(cbind(((alleleA-het)*2+het), (alleleB-het)*2+het), 1, min)/apply(
cbind(((alleleA-het)*2+het), ((alleleB-het)*2+het)), 1, sum)
percentHet=het/apply(cbind(alleleA-het, alleleB-het, het), 1, sum)
return(cbind.data.frame(geno[,1:y], "alleleA"=alleleA, "alleleB"=alleleB, "het"=het, "present"= present, "MAF"=MAF, "percentHET"=percentHet, geno[,(y+1):ncol(geno)]))
}
hap_to_G_modified  <- function(x="hap matrix", y="number of columns of information"){
##From Prasana, pulls out first allele for a and second for b
a = substring(x$alleles,1,1)
#Checks the frequency of the alleles if the second allele is more frequent it is substitued
a[x$alleleA<x$alleleB] = substring(x$alleles,3,3)[x$alleleA<x$alleleB]
#Same thing with the second allele
b = substring(x$alleles,3,3)
b[x$alleleA<x$alleleB] = substring(x$alleles,1,1)[x$alleleA<x$alleleB]
#Checks to make sure all alleles are one or the other
#print(paste("If 0 all alleles are accounted for: ", sum(a == b), sep=""))
## Turn into letter matrix for mapping
#makes a copy of the hap matrix
hap01 = x
#sets all allele values to NA
hap01[,(y+1):ncol(hap01)]=NA
## Turn allele a and allele b into 1 and -1.  Het into 0
#line by line if a line is a then it places 1 in hap01 for the allele
hap01[x == a] = 1
hap01[x == b] = -1
hap01[x == "M"] = 0
hap01[x == "Y"] = 0
hap01[x == "K"] = 0
hap01[x == "R"] = 0
hap01[x == "W"] = 0
hap01[x == "S"] = 0
hap01[x == "H"] = 0
hap01[x== "N"]=NA
return(hap01)}
gbs <- read.table(file = './data/Original_Data/tpg12-06-0006-dataset-s2', check.names = FALSE, header = TRUE, sep = ',', quote = '\"', row.names = 1, stringsAsFactors = FALSE)
any(duplicated(gbs$rs)) #see if there are duplicated matches
gbs <- gbs[!duplicated(gbs$rs), ] #remove multiple SNPs in the same strings
gbs <- modified_hap(gbs, 3, 254) #calculates population parameters
snp <- t(gbs[1, ]) #get one SNP
alleleA <- sum(snp[10:263] == 'A') + sum(snp[10:263] == 'H')#count allele in position 1
het <- sum(snp[10:263] == 'H') #count heterozygous
alleleB <- sum(snp[10:263] == 'T') + sum(snp[10:263] == 'H')#count allele in position 2
missing <- sum(snp[10:263] == 'N') #count missing calls
scored <- sum(snp[10:263] != 'N') #number of individuals not missing
present <- 1 - missing/254 #number present
maf <- min(((alleleA - het)*2 + het), ((alleleB - het)*2 + het))/sum((alleleA - het)*2, het, (alleleB -het)*2)
perHet <- het/scored
hist(gbs$MAF) #graph minor allele frequency
gbs <- gbs[gbs$MAF > 0.05, ]
hist(gbs$present)
gbs <- gbs[gbs$present > 0.3, ]
hist(gbs$percentHET)
marker <- hap_to_G_modified(gbs, 9) #convert to marker matrix
phen <- read.delim(file = './data/Original_Data/tpg12-06-0006-dataset-s1_Phenotype.csv', header = TRUE)
require(rrBLUP)
phen$PEDIGREE <- as.factor(phen$PEDIGREE) #NEW to use pedigree for fold validation
phen$fold <-as.numeric(phen$PEDIGREE) #NEW
require(rrBLUP)
rownames(marker) <- marker$rs #set row names
geno <- t(marker[, 10:ncol(marker)])
gmat <- rrBLUP::A.mat(geno) #make genomic relationship matrix
phen$GID <- paste('GID', phen$GID, sep = '') #make GIDs match
phen <- phen[match(phen$GID, rownames(geno)), ] #make sure rownames match
all(phen$GID == colnames(gmat)  && !is.null(phen$GID))
gs_pred = NULL
for(i in 1:max(phen$fold)){ #enter for loop #MODIFIED
x = phen
print(paste('Loop Progress:', i, sep=' ')) #check progress
phenoPredict <- x[x$fold == i ,] #get phenoPredict group
phenoTrain <- x[!x$fold == i , ] #get phenoTrain group
#order marker matrix by rbind values of phenoTrain and phenoPredict
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
#order genotypic data
g <- geno[match(ord, rownames(geno)),]
print(paste('Check that phenoTrain is in order with marker matrix is in order: ', all(as.character(phenoTrain$GID) == rownames(g)[1:nrow(phenoTrain)]  && !is.null(phenoTrain$GID)), sep='')) #check
print(paste('Check that phenoPredict is in order with matrix is in order: ', all(phenoPredict$GID == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)] && !is.null(phenoTrain$GID)) , sep=''))
#rrBLUP for genomic additive relationship matrix
mat <- A.mat(g)
##prepare phenotype frame
phenoPredict[ , 'Drought_Yield'] <- NA #set phenotype value to NA
##make phenotypic frame
phenotypic <- rbind(phenoTrain, phenoPredict)
#check that phenotypic and genotypic order are correct
print(paste('Check that all phenotype data and genotype data is in the same order:  ', all(rownames(g) == phenotypic$GID && !is.null(phenoTrain$GID)), sep=''))
ans <- kin.blup(phenotypic, K = mat, geno = "GID" , pheno ="Drought_Yield") #run rrBLUP
preds <- ans$pred #extract prediction
preds <- preds[names(preds) %in% phenoPredict$GID] #get only predictions
preds <- as.data.frame(preds) #make into a dataframe
preds$GID <- rownames(preds) #get plant_id
rownames(preds) <- NULL #set rownames as NULL
#set out
gs_pred <- rbind(gs_pred, preds)
}
accuracy <- merge(phen, gs_pred, by = 'GID')
plot(accuracy$Drought_Yield, accuracy$preds) #quick graph
cor(accuracy$Drought_Yield, accuracy$preds) #correlation or accuracy
marker_number <- c(250, 500, 750, 1000, 1250, 2500, 5000, 10000)
set.seed(123)
phen$fold <- sample(1:7, size = 254, replace = TRUE)
marker_number_out <- NULL #set up an object to hold our results
for(i in 1:length(marker_number)){
m_number <- marker_number[i] #get the number of markers
#want to repeat sampling 10 times
for(j in 1:10){
marker_density <- sample(x = nrow(marker), size = m_number, replace = FALSE) #get a random sample of the markers
for(k in 1:7){
x = phen
print(paste('Marker density:', m_number, 'Iteration:', j, 'Loop progress:', k, sep=' ')) #check progress
phenoPredict <- x[x$fold == k ,] #get phenoPredict group
phenoTrain <- x[!x$fold == k , ] #get phenoTrain group
#order marker matrix by rbind values of phenoTrain and phenoPredict
ord <- c(as.character(phenoTrain$GID), as.character(phenoPredict$GID))
#order genotypic data
g <- geno[match(ord, rownames(geno)),]
#########KEY only get markers in marker density#############
g <- g[, marker_density] #Modified
print(paste('Check that phenoTrain is in order with marker matrix is in order: ', all(as.character(phenoTrain$GID) == rownames(g)[1:nrow(phenoTrain)]  && !is.null(phenoTrain$GID)), sep='')) #check
print(paste('Check that phenoPredict is in order with matrix is in order: ', all(phenoPredict$GID == rownames(g)[(nrow(g)-nrow(phenoPredict)+1):nrow(g)] && !is.null(phenoTrain$GID)) , sep=''))
#rrBLUP for genomic additive relationship matrix
mat <- A.mat(g)
##prepare phenotype frame
phenoPredict[ , 'Drought_Yield'] <- NA #set phenotype value to NA
##make phenotypic frame
phenotypic <- rbind(phenoTrain, phenoPredict)
#check that phenotypic and genotypic order are correct
print(paste('Check that all phenotype data and genotype data is in the same order:  ', all(rownames(g) == phenotypic$GID && !is.null(phenoTrain$GID)), sep=''))
ans <- kin.blup(phenotypic, K = mat, geno = "GID" , pheno = "Drought_Yield") #run rrBLUP
preds <- ans$pred #extract prediction
preds <- preds[names(preds) %in% phenoPredict$GID] #get only predictions
preds <- as.data.frame(preds) #make into a dataframe
preds$GID <- rownames(preds) #get plant_id
rownames(preds) <- NULL #set rownames as NULL
#NEW Information
preds$marker_density <- m_number #set marker density
preds$iteration <- j #set iteration number
#set out
marker_number_out <- rbind(marker_number_out, preds)
}
}
} #loops close
View(phen)
rm(list=ls())
